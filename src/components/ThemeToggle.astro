---
import type { Theme, ThemeChangeEvent } from '../types/theme.js';

export interface Props {
  position?: 'fixed' | 'relative';
  className?: string;
}

const { position = 'fixed', className = '' } = Astro.props;
---

<button
  id="theme-toggle"
  class={`inline-flex items-center justify-center p-3 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-700 transition-all duration-200 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 focus:ring-offset-white dark:focus:ring-offset-gray-800 active:scale-95 hover:shadow-md ${position === 'fixed' ? 'fixed top-4 right-4 z-50' : ''} ${className}`}
  aria-label="Toggle theme"
  aria-pressed="false"
  type="button"
>
  <span class="relative block w-5 h-5 transition-transform duration-200 ease-in-out hover:scale-110" aria-hidden="true">
    <svg class="sun-icon absolute inset-0 opacity-100 rotate-0 transition-all duration-200 ease-in-out" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <circle cx="12" cy="12" r="5"></circle>
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </svg>
    <svg class="moon-icon absolute inset-0 opacity-0 rotate-90 transition-all duration-200 ease-in-out" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>
  </span>
  <span class="sr-only theme-toggle-text">Switch to light theme</span>
</button>

<style>
  /* Dark theme state - show moon icon */
  :root.dark .sun-icon {
    opacity: 0;
    transform: rotate(90deg);
  }

  :root.dark .moon-icon {
    opacity: 1;
    transform: rotate(0deg);
  }

  /* Screen reader only text */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
  }

  /* Respect reduced motion preference */
  @media (prefers-reduced-motion: reduce) {
    #theme-toggle,
    #theme-toggle span,
    .sun-icon,
    .moon-icon {
      transition: none !important;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    #theme-toggle {
      border-width: 2px;
    }
  }
</style>

<script>
  import { setTheme, getCurrentTheme, setupSystemThemeListener } from '../scripts/theme-init.js';
  import type { Theme, ThemeChangeEvent } from '../types/theme.js';

  class ThemeToggle {
    private button: HTMLButtonElement | null = null;
    private textElement: HTMLElement | null = null;
    private currentTheme!: Theme; // Definite assignment assertion
    private isInitialized = false;

    constructor() {
      this.button = document.getElementById('theme-toggle') as HTMLButtonElement;
      this.textElement = this.button?.querySelector('.theme-toggle-text') as HTMLElement;
      
      if (!this.button || !this.textElement) {
        console.warn('Theme toggle elements not found - theme toggle will not be functional');
        return;
      }

      // Initialize currentTheme property
      this.currentTheme = getCurrentTheme();
      this.init();
      this.isInitialized = true;
    }

    private init(): void {
      if (!this.button || !this.textElement) return;
      
      // Set initial state
      this.updateButtonState();
      
      // Add click handler
      this.button.addEventListener('click', this.handleToggle.bind(this));
      
      // Add keyboard handler
      this.button.addEventListener('keydown', this.handleKeydown.bind(this));
      
      // Listen for theme changes from other sources
      window.addEventListener('themechange', this.handleThemeChange.bind(this));
      
      // Setup system theme listener
      setupSystemThemeListener();
    }

    private handleToggle(): void {
      const newTheme = this.getNextTheme();
      setTheme(newTheme);
      this.currentTheme = newTheme;
      this.updateButtonState();
      
      // Announce theme change to screen readers
      this.announceThemeChange(newTheme);
    }

    private handleKeydown(event: KeyboardEvent): void {
      // Handle Enter and Space keys
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        this.handleToggle();
      }
    }

    private handleThemeChange(event: ThemeChangeEvent): void {
      this.currentTheme = event.detail.theme;
      this.updateButtonState();
    }

    private getNextTheme(): Theme {
      // Cycle through: system -> light -> dark -> system
      switch (this.currentTheme) {
        case 'system':
          return 'light';
        case 'light':
          return 'dark';
        case 'dark':
          return 'system';
        default:
          return 'light';
      }
    }

    private updateButtonState(): void {
      if (!this.button || !this.textElement) return;
      
      const resolvedTheme = this.getResolvedTheme();
      
      // Update ARIA pressed state
      this.button.setAttribute('aria-pressed', resolvedTheme === 'dark' ? 'true' : 'false');
      
      // Update screen reader text
      const nextTheme = this.getNextTheme();
      const nextResolvedTheme = nextTheme === 'system' 
        ? (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light')
        : nextTheme;
      
      this.textElement.textContent = `Switch to ${nextResolvedTheme} theme`;
      
      // Update aria-label with current state
      const currentStateText = this.currentTheme === 'system' 
        ? `system (${resolvedTheme})` 
        : this.currentTheme;
      this.button.setAttribute('aria-label', `Toggle theme (currently ${currentStateText})`);
    }

    private getResolvedTheme(): 'light' | 'dark' {
      if (this.currentTheme === 'system') {
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      }
      return this.currentTheme === 'dark' ? 'dark' : 'light';
    }

    private announceThemeChange(newTheme: Theme): void {
      const resolvedTheme = newTheme === 'system' 
        ? (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light')
        : (newTheme === 'dark' ? 'dark' : 'light');
      
      // Create a temporary element to announce the change
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = `Theme switched to ${resolvedTheme} mode`;
      
      document.body.appendChild(announcement);
      
      // Remove the announcement after a short delay
      setTimeout(() => {
        document.body.removeChild(announcement);
      }, 1000);
    }
  }

  // Initialize theme toggle when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ThemeToggle());
  } else {
    new ThemeToggle();
  }
</script>