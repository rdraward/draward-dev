---
export interface Props {
  /** Additional CSS classes to apply to the button */
  class?: string;
  /** Button size variant */
  size?: 'sm' | 'md' | 'lg';
  /** Custom aria-label for accessibility */
  'aria-label'?: string;
  /** Whether the button should be disabled */
  disabled?: boolean;
  /** Custom ID for the button (defaults to 'theme-toggle') */
  id?: string;
}

const { 
  class: className = '', 
  size = 'md',
  'aria-label': ariaLabel = 'Toggle theme',
  disabled = false,
  id = 'theme-toggle'
} = Astro.props;

// Configuration objects for better maintainability and type safety
const sizeClasses = {
  sm: 'w-8 h-8 p-1.5',
  md: 'w-10 h-10 p-2',
  lg: 'w-12 h-12 p-2.5'
} as const;

const iconSizes = {
  sm: 20,
  md: 24,
  lg: 28
} as const;

// Base button styles - separated for better maintainability
const baseButtonClasses = [
  'cursor-pointer',
  'transition-all duration-200',
  'focus:outline-none',
  'focus:ring-2 focus:ring-offset-2',
  'rounded',
  'disabled:opacity-50 disabled:cursor-not-allowed'
].join(' ');

// Theme-aware color classes
const colorClasses = [
  'text-slate-600 hover:text-[var(--dinosaur-color)]',
  'dark:text-neutral-300 dark:hover:text-[var(--space-invader-color)]',
  'focus:ring-slate-400 focus:ring-offset-white',
  'dark:focus:ring-neutral-500 dark:focus:ring-offset-slate-800'
].join(' ');
---

<button
  id={id}
  class={`${sizeClasses[size]} ${className} ${baseButtonClasses} ${colorClasses}`}
  aria-label={ariaLabel}
  title="Toggle between light and dark theme"
  disabled={disabled}
  data-theme-toggle
>
  <!-- Sun icon (visible in dark mode) -->
  <svg
    class="sun-icon hidden dark:block"
    width={iconSizes[size]}
    height={iconSizes[size]}
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    aria-hidden="true"
  >
    <circle cx="12" cy="12" r="5"></circle>
    <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"></path>
  </svg>
  
  <!-- Moon icon (visible in light mode) -->
  <svg
    class="moon-icon block dark:hidden"
    width={iconSizes[size]}
    height={iconSizes[size]}
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    aria-hidden="true"
  >
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</button>

<script>
  // Simple theme toggle functionality without complex dependencies
  function initializeThemeToggle() {
    const button = document.querySelector('[data-theme-toggle]') as HTMLButtonElement;
    if (!button) return;

    // Simple theme toggle function
    function toggleTheme() {
      const html = document.documentElement;
      const isDark = html.classList.contains('dark');
      
      if (isDark) {
        html.classList.remove('dark');
        localStorage.setItem('theme-preference', 'light');
        updateAriaLabel('dark');
      } else {
        html.classList.add('dark');
        localStorage.setItem('theme-preference', 'dark');
        updateAriaLabel('light');
      }
    }

    // Update aria-label based on current theme
    function updateAriaLabel(nextTheme: string) {
      const label = `Switch to ${nextTheme} theme`;
      button.setAttribute('aria-label', label);
      button.setAttribute('title', label);
    }

    // Initialize aria-label
    const currentTheme = document.documentElement.classList.contains('dark') ? 'light' : 'dark';
    updateAriaLabel(currentTheme);

    // Add event listeners
    button.addEventListener('click', toggleTheme);
    
    // Handle keyboard navigation
    button.addEventListener('keydown', (event) => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        toggleTheme();
      }
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeThemeToggle);
  } else {
    initializeThemeToggle();
  }
</script>